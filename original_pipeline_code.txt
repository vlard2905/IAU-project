from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder, FunctionTransformer, StandardScaler
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error
import pandas as pd
import numpy as np

print("HOW IT MUST BE:")
print(session)

session_new = pd.read_csv("dataset_iau/session.csv", sep='\t')

class DataPreprocessor:
    def __init__(self):
        self.columns_to_impute = ['pct_scroll_move', 'pct_wild_mouse', 'wild_mouse_duration',
                                  'pct_mouse_move', 'pct_click_product_info']
        self.imputers = {col: SimpleImputer(strategy='median') for col in self.columns_to_impute}

    def fit_transform(self, df):
        try:
            df = df.drop(columns=['user_id', 'product_ean', 'session_id'])
            df['screen_resolution'] = df['screen_width'].astype(str) + ' x ' + df['screen_height'].astype(str)
            df = df.drop(columns=['screen_width', 'screen_height'], axis=1)
            df['session_start_year'] = df['session_start'].apply(lambda x: int(x[0:4]))
            df['session_start_month'] = df['session_start'].apply(lambda x: int(x[5:7]))
            df['session_start_hour'] = df['session_start'].apply(lambda x: int(x[11:13]))
        except KeyError as e:
            print(f"Column '{e.args[0]}' does not exist in the DataFrame.")
        for col, imputer in self.imputers.items():
            df[col] = imputer.fit_transform(df[[col]])

        df = df.dropna()
        return df


class OutlierRemover:
    @staticmethod
    def replace_outliers_iqr(col_name, df):
        q1 = np.percentile(df[col_name], 25)
        q3 = np.percentile(df[col_name], 75)
        IQR = q3 - q1
        lwr_bound = q1 - (1.5 * IQR)
        upr_bound = q3 + (1.5 * IQR)
        
        df[col_name] = np.where(df[col_name] < lwr_bound, lwr_bound, df[col_name]) 
        df[col_name] = np.where(df[col_name] > upr_bound, upr_bound, df[col_name])
        
        return df

    @staticmethod
    def remove_outliers_iqr(col_name, df):
        q1 = np.percentile(df[col_name], 25)
        q3 = np.percentile(df[col_name], 75)
        IQR = q3 - q1
        lwr_bound = q1 - (1.5 * IQR)
        upr_bound = q3 + (1.5 * IQR)

        df = df.loc[(df[col_name] >= lwr_bound)]
        df = df.loc[(df[col_name] <= upr_bound)]

        return df


class FeatureEngineer:
    @staticmethod
    def log_transform(df, col):
        transform = FunctionTransformer(func=np.log1p)
        df[col] = transform.fit_transform(df[col])
        return df

    @staticmethod
    def square_transform(df, col):
        df[col] = np.square(df[col])
        return df

    def preprocess_features(self, df):
        df = self.log_transform(df, 'total_load_time')

        df = self.log_transform(df, 'pct_input')

        df = self.square_transform(df, 'scroll_move_total_rel_distance')

        df = self.square_transform(df, 'wild_mouse_duration')

        return df


class ModelTrainer:
    def __init__(self):
        self.label_encoder = LabelEncoder()

    def encode_labels(self, df):
        df['browser_name_encoded'] = self.label_encoder.fit_transform(df['browser_name'])
        df['screen_resolution_encoded'] = self.label_encoder.fit_transform(df['screen_resolution'])
        df = df.drop(columns=['screen_resolution', 'browser_name', 'session_start'])
        return df

    @staticmethod
    def scale_features(df):
        # Assuming you want to scale all features except some specific columns
        columns_to_scale = df.columns.difference(['screen_resolution_encoded', 'browser_name_encoded',
                                                  'session_start_hour', 'session_start_month', 'session_start_year', 'ack'])
        # Exclude non-numeric columns from scaling
        # columns_to_scale = df.select_dtypes(include=['float64']).columns
        scaler = StandardScaler()
        df[columns_to_scale] = scaler.fit_transform(df[columns_to_scale])
        return df


class Pipeline:
    def __init__(self):
        self.data_preprocessor = DataPreprocessor()
        self.outlier_remover = OutlierRemover()
        self.feature_engineer = FeatureEngineer()
        self.model_trainer = ModelTrainer()

    def process_data(self, df):
        df = self.data_preprocessor.fit_transform(df)

        df['ack'] = df['ack'].astype(str)
        i = 0

        for col in df.select_dtypes(include=['float64']).columns:
            if i < len(df.select_dtypes(include=['float64']).columns)/2:
                df = OutlierRemover.replace_outliers_iqr(col, df)
            else:
                df = OutlierRemover.remove_outliers_iqr(col, df)
            i = i+1

        df['ack'] = df['ack'].astype(float)

        self.feature_engineer.preprocess_features(df)

        df = self.model_trainer.encode_labels(df)
        df = self.model_trainer.scale_features(df)

        return df

pipeline = Pipeline()
print("___DATA BEFORE PREPROCESSING___")
print(session_new)
print("___DATA AFTER PREPROCESSING___")
processed_session = pipeline.process_data(session_new)
print(processed_session)